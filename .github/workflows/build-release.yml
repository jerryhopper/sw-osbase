# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - '*'
      - '!master' 
#     - '!master'   # excludes master
#     - '*'         # matches every branch that doesn't contain a '/'
#      - '*/*'       # matches every branch containing a single '/'
#      - '**'        # matches every branch
#  pull_request:
#    branches: [ master ]
#on:
#  push:
#    branches-ignore:
#      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Extract board name
        shell: bash
        run: |
          source ./config-default.conf
          export OSBOX_BOARD=$BOARD
          echo "OSBOX_BOARD=$BOARD" >> $GITHUB_ENV
          echo "${{ env.OSBOX_BOARD }}"
          #echo "::set-env name=OSBOX_BOARD::$OSBOX_BOARD"          
        id: extract_board
      # Prep os
      - name: Install apt requirements
        run: |
          apt install -y wget ca-certificates device-tree-compiler pv bc lzop zip binfmt-support build-essential ccache debootstrap ntpdate \
	gawk gcc-arm-linux-gnueabihf qemu-user-static u-boot-tools uuid-dev zlib1g-dev unzip libusb-1.0-0-dev fakeroot \
	parted pkg-config libncurses5-dev whiptail debian-keyring debian-archive-keyring f2fs-tools libfile-fcntllock-perl rsync libssl-dev \
	nfs-kernel-server btrfs-progs ncurses-term p7zip-full kmod dosfstools libc6-dev-armhf-cross imagemagick \
	curl patchutils liblz4-tool libpython2.7-dev linux-base swig aptly acl python3-dev python3-distutils \
	locales ncurses-base pixz dialog systemd-container udev lib32stdc++6 libc6-i386 lib32ncurses5 lib32tinfo5 \
	bison libbison-dev flex libfl-dev cryptsetup gpg gnupg1 cpio aria2 pigz dirmngr python3-distutils 
      # Runs a set of commands using the runners shell
      - name: Get Armbian build enviroment
        run: |
          #echo "${{ env.OSBOX_BOARD }}"
          git clone --depth 1 https://github.com/armbian/build
          ## Build armbian.
          ./build/compile.sh BOARD=${{ env.OSBOX_BOARD }} exit
          
      # Runs a set of commands using the runners shell
      - name: Build Armbian
        run: |
          echo "Building for ${{ env.OSBOX_BOARD }}"
          
          # Create userpatches folder
          mkdir -p ./build/userpatches
          cp ./customize-image.sh ./build/userpatches/customize-image.sh
          cp ./config-default.conf ./build/userpatches/config-default.conf
          cp ./config-default.conf ./build/userpatches/config-example.conf

          ## Build armbian.
          ./build/compile.sh
          
          ## Renaming the img and sha
          mv "./build/output/images/*.img" "./build/output/images/osbox-${{ env.OSBOX_BOARD }}.img"
          mv "./build/output/images/*.sha" "./build/output/images/osbox-${{ env.OSBOX_BOARD }}.sha"  
          
          ## Create archive
          tar -zcvf osbox-${{ env.OSBOX_BOARD }}.tar.gz ./build/output/images
          
          
          ##./build/compile.sh BOARD=${{ env.OSBOX_BOARD }} HOST=osbox BRANCH=current RELEASE=focal BUILD_MINIMAL=yes BUILD_DESKTOP=no KERNEL_ONLY=no KERNEL_CONFIGURE=prebuilt COMPRESS_OUTPUTIMAGE=sha,gpg,img
          #mkdir -p ./build/output/images
          #touch ./build/output/images/dummyfile.txt
          #ls -latr ./build/output/images
          #tar -zcvf osbox-${{ env.OSBOX_BOARD }}.tar.gz ./build/output/images
          #ls -latr .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Osbox ${{ env.OSBOX_BOARD }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./osbox-${{ env.OSBOX_BOARD }}.tar.gz
          asset_name: osbox-${{ env.OSBOX_BOARD }}.tar.gz
          asset_content_type: application/gzip
