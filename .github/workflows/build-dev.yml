# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "master"
      - '!v*'
      - '!master' 
#     - '!master'   # excludes master
#     - '*'         # matches every branch that doesn't contain a '/'
#      - '*/*'       # matches every branch containing a single '/'
#      - '**'        # matches every branch
#  pull_request:
#    branches: [ master ]
#on:
#  push:
#    branches-ignore:
#      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Extract board name
        shell: bash
        run: |
          source ./config-default.conf
          export OSBOX_BOARD=$BOARD
          echo "OSBOX_BOARD=$BOARD" >> $GITHUB_ENV
          echo "${{ env.OSBOX_BOARD }}"
          #echo "::set-env name=OSBOX_BOARD::$OSBOX_BOARD"          
        id: extract_board

      - name: Get Armbian build enviroment
        run: |
          #echo "${{ env.OSBOX_BOARD }}"
          git clone --depth 1 https://github.com/armbian/build
          #ls -latr
      # Runs a set of commands using the runners shell
      - name: Build Armbian
        run: |
          echo "Building for ${{ env.OSBOX_BOARD }}"
          #ls -latr build
          # Create userpatches folder
          mkdir -p ./build/userpatches
          #ls -latr build/userpatches
          cp ./customize-image.sh ./build/userpatches/customize-image.sh
          cp ./config-default.conf ./build/userpatches/config-default.conf
          cp ./config-default.conf ./build/userpatches/config-example.conf

          ./build/compile.sh
          ##./build/compile.sh BOARD=${{ env.OSBOX_BOARD }} HOST=osbox BRANCH=current RELEASE=focal BUILD_MINIMAL=yes BUILD_DESKTOP=no KERNEL_ONLY=no KERNEL_CONFIGURE=prebuilt COMPRESS_OUTPUTIMAGE=sha,gpg,img
          #mkdir -p ./build/output/images
          #touch ./build/output/images/dummyfile.txt
          
          #ls -latr ./build/output/images
          tar -zcvf osbox-${{ env.OSBOX_BOARD }}.tar.gz ./build/output/images
          #ls -latr .
