# This is a basic workflow to help you get started with Actions

name: BUILDDEVELOP

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - odroidc4
#on:
#  workflow_run:
#    workflows: ["BUILDVERSIONTEST"]
#    branches: [master]
#    types:
#      - completed
# This is a basic workflow to help you get started with Actions

#on:
#  push:
#    branches:
#      - '*' 
#     - '!master'   # excludes master
#     - '*'         # matches every branch that doesn't contain a '/'
#      - '*/*'       # matches every branch containing a single '/'
#      - '**'        # matches every branch
#  pull_request:
#    branches: [ master ]
#on:
#  push:
#    branches-ignore:
#      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #runs-on: ubuntu-latest
    #runs-on: ubuntu-18.04
    runs-on: ubuntu-20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install apt-utils
        shell: bash
        run: sudo apt-get -y install apt-utils
      - name: Extract board name
        shell: bash
        run: |
          source ./config-default.conf
          export OSBOX_BOARD=$BOARD
          echo "OSBOX_BOARD=$BOARD" >> $GITHUB_ENV
          echo "${{ env.OSBOX_BOARD }}"
          #echo "::set-env name=OSBOX_BOARD::$OSBOX_BOARD"          
        id: extract_board
      - name: Checking sw-osbox-bin download
        shell: bash
        run: |
          _ORG_NAME="jerryhopper"
          _REPO_NAME="sw-osbox-bin"
          _LATEST_VERSION=$(curl -s https://api.github.com/repos/${_ORG_NAME}/${_REPO_NAME}/releases/latest|jq .tag_name -r )
          echo "https://api.github.com/repos/${_ORG_NAME}/${_REPO_NAME}/releases/latest"
          echo $_LATEST_VERSION
          echo "https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz"
          DOWNLOAD_CODE=$(curl -L -s -o /dev/null -I -w "%{http_code}" https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz)
          if [ "$DOWNLOAD_CODE" != "200" ];then
            echo "Download error! ( ${DOWNLOAD_CODE} ) "https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz""
              exit 1
          fi
          echo "OSBOX_ARCHIVE=https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz" >> $GITHUB_ENV
      # Runs a set of commands using the runners shell
      - name: Get Armbian build enviroment
        run: |
          #echo "${{ env.OSBOX_BOARD }}"
          # git clone --depth 1 https://github.com/armbian/build
          git clone --depth 1 https://github.com/jerryhopper/build
      # Runs a set of commands using the runners shell
      - name: Build Armbian
        run: |
          echo "Building for ${{ env.OSBOX_BOARD }}"
          
          # Create userpatches folder
          mkdir -p ./build/userpatches
          cp ./customize-image.sh ./build/userpatches/customize-image.sh
          cp ./config-default.conf ./build/userpatches/config-default.conf
          cp ./config-default.conf ./build/userpatches/config-example.conf

          ## Build armbian.
          ./build/compile.sh docker
      - name: Build Tarball
        run: |    
          THETAG="${{ steps.get_release.outputs.tag_name }}"

          ## Renaming the img and sha
          for nam in ./build/output/images/Armbian_*
          do
              filename=$(basename -- "$nam")
              extension="${filename##*.}"
              filename="${filename%.*}"
              newname="./build/output/images/osbox-$THETAG.$extension"
              sudo mv $nam $newname
          done
          cd ./build/output/images
          
          ## Create archive
          sudo tar -zcvf osbox-$THETAG.tar.gz osbox-$THETAG.img
          ls -latr
          #cd ./../../..
          
    
