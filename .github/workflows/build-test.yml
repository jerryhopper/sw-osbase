# This is a basic workflow to help you get started with Actions

name: BUILDVERSIONTEST

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
#on:
#  push:
#    branches:
#      - "master"
#      - '!v*'
#      - '!master' 
#     - '!master'   # excludes master
#     - '*'         # matches every branch that doesn't contain a '/'
#      - '*/*'       # matches every branch containing a single '/'
#      - '**'        # matches every branch
#  pull_request:
#    branches: [ master ]
#on:
#  push:
#    branches-ignore:
#      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Extract board name
        shell: bash
        run: |
          source ./config-default.conf
          export OSBOX_BOARD=$BOARD
          echo "OSBOX_BOARD=$BOARD" >> $GITHUB_ENV
          echo "${{ env.OSBOX_BOARD }}"
          #echo "::set-env name=OSBOX_BOARD::$OSBOX_BOARD"          
        id: extract_board
      - name: Testje
        shell: bash
        run: |
          _ORG_NAME="jerryhopper"
          _REPO_NAME="sw-osbox-bin"
          _LATEST_VERSION=$(curl -s https://api.github.com/repos/${_ORG_NAME}/${_REPO_NAME}/releases/latest|jq .tag_name -r )
          echo "https://api.github.com/repos/${_ORG_NAME}/${_REPO_NAME}/releases/latest"
          echo $_LATEST_VERSION
          echo "https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz"
          DOWNLOAD_CODE=$(curl -L -s -o /dev/null -I -w "%{http_code}" https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz)
          if [ "$DOWNLOAD_CODE" != "200" ];then
            echo "Download error! ( ${DOWNLOAD_CODE} ) "https://github.com/${_ORG_NAME}/${_REPO_NAME}/archive/${_LATEST_VERSION}.tar.gz""
              exit 1
          fi        
